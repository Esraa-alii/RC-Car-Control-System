
RC_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000464  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e0d  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000701  00000000  00000000  00001421  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ee  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ad  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f9  00000000  00000000  0000282d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002c26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	81 00       	.word	0x0081	; ????
  56:	71 00       	.word	0x0071	; ????
  58:	71 00       	.word	0x0071	; ????
  5a:	71 00       	.word	0x0071	; ????
  5c:	7e 00       	.word	0x007e	; ????
  5e:	71 00       	.word	0x0071	; ????
  60:	71 00       	.word	0x0071	; ????
  62:	71 00       	.word	0x0071	; ????
  64:	71 00       	.word	0x0071	; ????
  66:	71 00       	.word	0x0071	; ????
  68:	87 00       	.word	0x0087	; ????
  6a:	71 00       	.word	0x0071	; ????
  6c:	71 00       	.word	0x0071	; ????
  6e:	71 00       	.word	0x0071	; ????
  70:	71 00       	.word	0x0071	; ????
  72:	71 00       	.word	0x0071	; ????
  74:	84 00       	.word	0x0084	; ????
  76:	8a 00       	.word	0x008a	; ????
  78:	71 00       	.word	0x0071	; ????
  7a:	71 00       	.word	0x0071	; ????
  7c:	71 00       	.word	0x0071	; ????
  7e:	71 00       	.word	0x0071	; ????
  80:	71 00       	.word	0x0071	; ????
  82:	71 00       	.word	0x0071	; ????
  84:	71 00       	.word	0x0071	; ????
  86:	71 00       	.word	0x0071	; ????
  88:	71 00       	.word	0x0071	; ????
  8a:	71 00       	.word	0x0071	; ????
  8c:	71 00       	.word	0x0071	; ????
  8e:	71 00       	.word	0x0071	; ????
  90:	71 00       	.word	0x0071	; ????
  92:	71 00       	.word	0x0071	; ????
  94:	81 00       	.word	0x0081	; ????
  96:	71 00       	.word	0x0071	; ????
  98:	71 00       	.word	0x0071	; ????
  9a:	71 00       	.word	0x0071	; ????
  9c:	7e 00       	.word	0x007e	; ????
  9e:	71 00       	.word	0x0071	; ????
  a0:	71 00       	.word	0x0071	; ????
  a2:	71 00       	.word	0x0071	; ????
  a4:	71 00       	.word	0x0071	; ????
  a6:	71 00       	.word	0x0071	; ????
  a8:	87 00       	.word	0x0087	; ????
  aa:	71 00       	.word	0x0071	; ????
  ac:	71 00       	.word	0x0071	; ????
  ae:	71 00       	.word	0x0071	; ????
  b0:	71 00       	.word	0x0071	; ????
  b2:	71 00       	.word	0x0071	; ????
  b4:	84 00       	.word	0x0084	; ????
  b6:	8a 00       	.word	0x008a	; ????

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf e5       	ldi	r28, 0x5F	; 95
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
#include "../MCAL/UART/UART_interface.h"
#include "../HAL/DCMOTOR/DCMOTOR_interface.h"

int main(void)
{
	DIO_voidSetPinDir(DIO_PORTD,DIO_PIN0,INPUT);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPinDir>
    DCMOTOR_voidInit();
  da:	0e 94 91 00 	call	0x122	; 0x122 <DCMOTOR_voidInit>
	UART_voidInit();
  de:	0e 94 1b 02 	call	0x436	; 0x436 <UART_voidInit>
	u8 command;
    while (1) 
    {
		command = UART_u8RX();
  e2:	0e 94 26 02 	call	0x44c	; 0x44c <UART_u8RX>
		switch(command){
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	e2 54       	subi	r30, 0x42	; 66
  ec:	f1 09       	sbc	r31, r1
  ee:	e2 33       	cpi	r30, 0x32	; 50
  f0:	f1 05       	cpc	r31, r1
  f2:	b8 f7       	brcc	.-18     	; 0xe2 <main+0x12>
  f4:	e6 5d       	subi	r30, 0xD6	; 214
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	0c 94 2a 02 	jmp	0x454	; 0x454 <__tablejump2__>
			case 'F':
			case 'f':
				DCMOTOR_voidForward();
  fc:	0e 94 19 01 	call	0x232	; 0x232 <DCMOTOR_voidForward>
				break;
 100:	f0 cf       	rjmp	.-32     	; 0xe2 <main+0x12>
			
			case 'B':
			case 'b':
				DCMOTOR_voidBackword();
 102:	0e 94 20 01 	call	0x240	; 0x240 <DCMOTOR_voidBackword>
				break;
 106:	ed cf       	rjmp	.-38     	; 0xe2 <main+0x12>
			
			case 'R':
			case 'r':
			DCMOTOR_voidRight();
 108:	0e 94 27 01 	call	0x24e	; 0x24e <DCMOTOR_voidRight>
			break;
 10c:	ea cf       	rjmp	.-44     	; 0xe2 <main+0x12>
			
			case 'l':
			case 'L':
			DCMOTOR_voidLeft();
 10e:	0e 94 2e 01 	call	0x25c	; 0x25c <DCMOTOR_voidLeft>
			break;
 112:	e7 cf       	rjmp	.-50     	; 0xe2 <main+0x12>
			
			case 'S':
			case 's':
			DCMOTOR_voidStop(FIRST_MOTOR_ID);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DCMOTOR_voidStop>
			DCMOTOR_voidStop(SEC_MOTOR_ID);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DCMOTOR_voidStop>
			
			break;
 120:	e0 cf       	rjmp	.-64     	; 0xe2 <main+0x12>

00000122 <DCMOTOR_voidInit>:
#include "DCMOTOR_config.h"
#include "DCMOTOR_interface.h"

void DCMOTOR_voidInit(void){
	#ifdef FIRST_MOTOR_ID
		DIO_voidSetPinDir(H_ENA_PORT,H_ENA_PIN,OUTPUT) ;
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPinDir>
		DIO_voidSetPinDir(H_A1_PORT,H_A1_PIN,OUTPUT) ;
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPinDir>
		DIO_voidSetPinDir(H_A2_PORT,H_A2_PIN,OUTPUT) ;
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPinDir>
	#endif
	
	#ifdef SEC_MOTOR_ID
		DIO_voidSetPinDir(H_ENB_PORT,H_ENB_PIN,OUTPUT) ;
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	65 e0       	ldi	r22, 0x05	; 5
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPinDir>
		DIO_voidSetPinDir(H_A3_PORT,H_A3_PIN,OUTPUT) ;
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPinDir>
		DIO_voidSetPinDir(H_A4_PORT,H_A4_PIN,OUTPUT) ;
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	67 e0       	ldi	r22, 0x07	; 7
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_voidSetPinDir>
 15e:	08 95       	ret

00000160 <DCMOTOR_voidCW>:
	#endif 
}
void DCMOTOR_voidCW(u8 id){
	
	
	if (id == FIRST_MOTOR_ID)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	81 f4       	brne	.+32     	; 0x184 <DCMOTOR_voidCW+0x24>
	{
		DIO_voidSetPinVal(H_ENA_PORT,H_ENA_PIN,HIGH) ; 
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(H_A1_PORT,H_A1_PIN,HIGH) ;
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(H_A2_PORT,H_A2_PIN,LOW) ;
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
 182:	08 95       	ret
	}
	else if(id==SEC_MOTOR_ID){
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	71 f4       	brne	.+28     	; 0x1a4 <DCMOTOR_voidCW+0x44>
	DIO_voidSetPinVal(H_ENB_PORT,H_ENB_PIN,HIGH) ;
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	65 e0       	ldi	r22, 0x05	; 5
 18c:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(H_A3_PORT,H_A3_PIN,HIGH) ; 
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(H_A4_PORT,H_A4_PIN,LOW) ; 
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	67 e0       	ldi	r22, 0x07	; 7
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
 1a4:	08 95       	ret

000001a6 <DCMOTOR_voidACW>:
	}
void DCMOTOR_voidACW(u8 id){
	
	
	/*Drive motor cw */
	if (id == FIRST_MOTOR_ID)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <DCMOTOR_voidACW+0x24>
	{
		DIO_voidSetPinVal(H_ENA_PORT,H_ENA_PIN,HIGH) ;
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(H_A1_PORT,H_A1_PIN,LOW) ;
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(H_A2_PORT,H_A2_PIN,HIGH) ;
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
 1c8:	08 95       	ret
	}
	else if(id == SEC_MOTOR_ID){
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	71 f4       	brne	.+28     	; 0x1ea <DCMOTOR_voidACW+0x44>
	DIO_voidSetPinVal(H_ENB_PORT,H_ENB_PIN,HIGH) ;
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(H_A3_PORT,H_A3_PIN,LOW) ;
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(H_A4_PORT,H_A4_PIN,HIGH) ;
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	67 e0       	ldi	r22, 0x07	; 7
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
 1ea:	08 95       	ret

000001ec <DCMOTOR_voidStop>:
	}
	}
	
void DCMOTOR_voidStop(u8 id){
	/*Drive motor cw */
	if (id ==FIRST_MOTOR_ID)
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	81 f4       	brne	.+32     	; 0x210 <DCMOTOR_voidStop+0x24>
	{
		DIO_voidSetPinVal(H_ENA_PORT,H_ENA_PIN,LOW) ;
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
		 DIO_voidSetPinVal(H_A1_PORT,H_A1_PIN,LOW) ;
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
		 DIO_voidSetPinVal(H_A2_PORT,H_A2_PIN,LOW) ;
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
 20e:	08 95       	ret
	}
	else if(id ==SEC_MOTOR_ID){
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	71 f4       	brne	.+28     	; 0x230 <DCMOTOR_voidStop+0x44>
	DIO_voidSetPinVal(H_ENB_PORT,H_ENB_PIN,LOW) ;
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	65 e0       	ldi	r22, 0x05	; 5
 218:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
	  DIO_voidSetPinVal(H_A3_PORT,H_A3_PIN,LOW) ;
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	66 e0       	ldi	r22, 0x06	; 6
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
	  DIO_voidSetPinVal(H_A4_PORT,H_A4_PIN,LOW) ;
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	67 e0       	ldi	r22, 0x07	; 7
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_voidSetPinVal>
 230:	08 95       	ret

00000232 <DCMOTOR_voidForward>:
	}
}


void DCMOTOR_voidForward(void){
	DCMOTOR_voidCW(FIRST_MOTOR_ID);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_voidCW>
	DCMOTOR_voidCW(SEC_MOTOR_ID);
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_voidCW>
 23e:	08 95       	ret

00000240 <DCMOTOR_voidBackword>:
}
void DCMOTOR_voidBackword(void){
		DCMOTOR_voidACW(FIRST_MOTOR_ID);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DCMOTOR_voidACW>
		DCMOTOR_voidACW(SEC_MOTOR_ID);
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DCMOTOR_voidACW>
 24c:	08 95       	ret

0000024e <DCMOTOR_voidRight>:
}
void DCMOTOR_voidRight(void){
	DCMOTOR_voidCW(FIRST_MOTOR_ID);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_voidCW>
	DCMOTOR_voidStop(SEC_MOTOR_ID);
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DCMOTOR_voidStop>
 25a:	08 95       	ret

0000025c <DCMOTOR_voidLeft>:
}

void DCMOTOR_voidLeft(void){
	DCMOTOR_voidCW (SEC_MOTOR_ID);
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 b0 00 	call	0x160	; 0x160 <DCMOTOR_voidCW>
	DCMOTOR_voidStop(FIRST_MOTOR_ID);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DCMOTOR_voidStop>
 268:	08 95       	ret

0000026a <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 copy_u8port, u8 copy_u8pin,u8 copy_u8dir){
	
	  
	
	      if (copy_u8dir==OUTPUT || copy_u8dir==INPUT)
 26a:	42 30       	cpi	r20, 0x02	; 2
 26c:	08 f0       	brcs	.+2      	; 0x270 <DIO_voidSetPinDir+0x6>
 26e:	6f c0       	rjmp	.+222    	; 0x34e <DIO_voidSetPinDir+0xe4>
	      {
		      
		      if (copy_u8dir==OUTPUT)
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	a1 f5       	brne	.+104    	; 0x2dc <DIO_voidSetPinDir+0x72>
		      {
				 
				 switch(copy_u8port){
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	89 f0       	breq	.+34     	; 0x29a <DIO_voidSetPinDir+0x30>
 278:	28 f0       	brcs	.+10     	; 0x284 <DIO_voidSetPinDir+0x1a>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	c9 f0       	breq	.+50     	; 0x2b0 <DIO_voidSetPinDir+0x46>
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	11 f1       	breq	.+68     	; 0x2c6 <DIO_voidSetPinDir+0x5c>
 282:	08 95       	ret
					 
				 case DIO_PORTA : SET_BIT(DDRA_REG,copy_u8pin) ; break ; 
 284:	2a b3       	in	r18, 0x1a	; 26
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidSetPinDir+0x26>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidSetPinDir+0x22>
 294:	82 2b       	or	r24, r18
 296:	8a bb       	out	0x1a, r24	; 26
 298:	08 95       	ret
				 case DIO_PORTB : SET_BIT(DDRB_REG,copy_u8pin) ; break ;
 29a:	27 b3       	in	r18, 0x17	; 23
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_voidSetPinDir+0x3c>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_voidSetPinDir+0x38>
 2aa:	82 2b       	or	r24, r18
 2ac:	87 bb       	out	0x17, r24	; 23
 2ae:	08 95       	ret
				 case DIO_PORTC : SET_BIT(DDRC_REG,copy_u8pin) ; break ;
 2b0:	24 b3       	in	r18, 0x14	; 20
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_voidSetPinDir+0x52>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_voidSetPinDir+0x4e>
 2c0:	82 2b       	or	r24, r18
 2c2:	84 bb       	out	0x14, r24	; 20
 2c4:	08 95       	ret
				 case DIO_PORTD : SET_BIT(DDRD_REG,copy_u8pin) ; break ;				 
 2c6:	21 b3       	in	r18, 0x11	; 17
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_voidSetPinDir+0x68>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_voidSetPinDir+0x64>
 2d6:	82 2b       	or	r24, r18
 2d8:	81 bb       	out	0x11, r24	; 17
 2da:	08 95       	ret
				 }	 
				 
	         }
			 else if (copy_u8dir==INPUT)
 2dc:	41 11       	cpse	r20, r1
 2de:	37 c0       	rjmp	.+110    	; 0x34e <DIO_voidSetPinDir+0xe4>
			 {
				 switch(copy_u8port){
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	91 f0       	breq	.+36     	; 0x308 <DIO_voidSetPinDir+0x9e>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <DIO_voidSetPinDir+0x86>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	d9 f0       	breq	.+54     	; 0x320 <DIO_voidSetPinDir+0xb6>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	29 f1       	breq	.+74     	; 0x338 <DIO_voidSetPinDir+0xce>
 2ee:	08 95       	ret
					 
					 case DIO_PORTA : CLR_BIT(DDRA_REG,copy_u8pin) ; break ;
 2f0:	2a b3       	in	r18, 0x1a	; 26
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_voidSetPinDir+0x92>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_voidSetPinDir+0x8e>
 300:	80 95       	com	r24
 302:	82 23       	and	r24, r18
 304:	8a bb       	out	0x1a, r24	; 26
 306:	08 95       	ret
					 case DIO_PORTB : CLR_BIT(DDRB_REG,copy_u8pin) ; break ;
 308:	27 b3       	in	r18, 0x17	; 23
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_voidSetPinDir+0xaa>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_voidSetPinDir+0xa6>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	87 bb       	out	0x17, r24	; 23
 31e:	08 95       	ret
					 case DIO_PORTC : CLR_BIT(DDRC_REG,copy_u8pin) ; break ;
 320:	24 b3       	in	r18, 0x14	; 20
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinDir+0xc2>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinDir+0xbe>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	84 bb       	out	0x14, r24	; 20
 336:	08 95       	ret
					 case DIO_PORTD : CLR_BIT(DDRD_REG,copy_u8pin) ; break ;
 338:	21 b3       	in	r18, 0x11	; 17
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_voidSetPinDir+0xda>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_voidSetPinDir+0xd6>
 348:	80 95       	com	r24
 34a:	82 23       	and	r24, r18
 34c:	81 bb       	out	0x11, r24	; 17
 34e:	08 95       	ret

00000350 <DIO_voidSetPinVal>:
}

void DIO_voidSetPinVal(u8 copy_u8port, u8 copy_u8pin,u8 copy_u8val){
	
	
	    if (copy_u8val==HIGH || copy_u8val==LOW)
 350:	42 30       	cpi	r20, 0x02	; 2
 352:	08 f0       	brcs	.+2      	; 0x356 <DIO_voidSetPinVal+0x6>
 354:	6f c0       	rjmp	.+222    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	    {
	 
	      if(copy_u8val==HIGH){
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	a1 f5       	brne	.+104    	; 0x3c2 <DIO_voidSetPinVal+0x72>
			  
			  switch(copy_u8port){
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	89 f0       	breq	.+34     	; 0x380 <DIO_voidSetPinVal+0x30>
 35e:	28 f0       	brcs	.+10     	; 0x36a <DIO_voidSetPinVal+0x1a>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	c9 f0       	breq	.+50     	; 0x396 <DIO_voidSetPinVal+0x46>
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	11 f1       	breq	.+68     	; 0x3ac <DIO_voidSetPinVal+0x5c>
 368:	08 95       	ret
				  
				  case DIO_PORTA: SET_BIT(PORTA_REG,copy_u8pin) ; break;
 36a:	2b b3       	in	r18, 0x1b	; 27
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_voidSetPinVal+0x26>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_voidSetPinVal+0x22>
 37a:	82 2b       	or	r24, r18
 37c:	8b bb       	out	0x1b, r24	; 27
 37e:	08 95       	ret
				  case DIO_PORTB: SET_BIT(PORTB_REG,copy_u8pin) ; break;
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_voidSetPinVal+0x3c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_voidSetPinVal+0x38>
 390:	82 2b       	or	r24, r18
 392:	88 bb       	out	0x18, r24	; 24
 394:	08 95       	ret
				  case DIO_PORTC: SET_BIT(PORTC_REG,copy_u8pin) ; break;
 396:	25 b3       	in	r18, 0x15	; 21
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_voidSetPinVal+0x52>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_voidSetPinVal+0x4e>
 3a6:	82 2b       	or	r24, r18
 3a8:	85 bb       	out	0x15, r24	; 21
 3aa:	08 95       	ret
				  case DIO_PORTD: SET_BIT(PORTD_REG,copy_u8pin) ; break ; 
 3ac:	22 b3       	in	r18, 0x12	; 18
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_voidSetPinVal+0x68>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_voidSetPinVal+0x64>
 3bc:	82 2b       	or	r24, r18
 3be:	82 bb       	out	0x12, r24	; 18
 3c0:	08 95       	ret
			  }
		  }
	        else if (copy_u8val==LOW)
 3c2:	41 11       	cpse	r20, r1
 3c4:	37 c0       	rjmp	.+110    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	        { 
				switch(copy_u8port){
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	91 f0       	breq	.+36     	; 0x3ee <DIO_voidSetPinVal+0x9e>
 3ca:	28 f0       	brcs	.+10     	; 0x3d6 <DIO_voidSetPinVal+0x86>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	d9 f0       	breq	.+54     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	29 f1       	breq	.+74     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3d4:	08 95       	ret
		        
		        case DIO_PORTA: CLR_BIT(PORTA_REG,copy_u8pin) ; break;
 3d6:	2b b3       	in	r18, 0x1b	; 27
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_voidSetPinVal+0x92>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_voidSetPinVal+0x8e>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	8b bb       	out	0x1b, r24	; 27
 3ec:	08 95       	ret
		        case DIO_PORTB: CLR_BIT(PORTB_REG,copy_u8pin) ; break;
 3ee:	28 b3       	in	r18, 0x18	; 24
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_voidSetPinVal+0xaa>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_voidSetPinVal+0xa6>
 3fe:	80 95       	com	r24
 400:	82 23       	and	r24, r18
 402:	88 bb       	out	0x18, r24	; 24
 404:	08 95       	ret
		        case DIO_PORTC: CLR_BIT(PORTC_REG,copy_u8pin) ; break;
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	85 bb       	out	0x15, r24	; 21
 41c:	08 95       	ret
		        case DIO_PORTD: CLR_BIT(PORTD_REG,copy_u8pin) ; break ;
 41e:	22 b3       	in	r18, 0x12	; 18
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	80 95       	com	r24
 430:	82 23       	and	r24, r18
 432:	82 bb       	out	0x12, r24	; 18
 434:	08 95       	ret

00000436 <UART_voidInit>:
	/* SET DATA */
	UDR_REG=copy_u8data ; 
	while(GET_BIT(UCSRA_REG,5)==0) ; 
	
	
}
 436:	86 e8       	ldi	r24, 0x86	; 134
 438:	80 bd       	out	0x20, r24	; 32
 43a:	87 e6       	ldi	r24, 0x67	; 103
 43c:	89 b9       	out	0x09, r24	; 9
 43e:	8a b1       	in	r24, 0x0a	; 10
 440:	88 60       	ori	r24, 0x08	; 8
 442:	8a b9       	out	0x0a, r24	; 10
 444:	8a b1       	in	r24, 0x0a	; 10
 446:	80 61       	ori	r24, 0x10	; 16
 448:	8a b9       	out	0x0a, r24	; 10
 44a:	08 95       	ret

0000044c <UART_u8RX>:
u8 UART_u8RX(void) {
	
	while(GET_BIT(UCSRA_REG,7)==0) ; 
 44c:	5f 9b       	sbis	0x0b, 7	; 11
 44e:	fe cf       	rjmp	.-4      	; 0x44c <UART_u8RX>
	
	return UDR_REG ;  // RETURN VALUE 
 450:	8c b1       	in	r24, 0x0c	; 12
 452:	08 95       	ret

00000454 <__tablejump2__>:
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	05 90       	lpm	r0, Z+
 45a:	f4 91       	lpm	r31, Z
 45c:	e0 2d       	mov	r30, r0
 45e:	09 94       	ijmp

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
